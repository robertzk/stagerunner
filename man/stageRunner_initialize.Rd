% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stagerunner-initialize.R
\name{stageRunner_initialize}
\alias{stageRunner_initialize}
\alias{stagerunner_initialize}
\title{Initialize a stageRunner object.}
\usage{
stagerunner_initialize(context, stages, remember = FALSE,
  mode = getOption("stagerunner.mode") \%||\% "head")
}
\arguments{
\item{context}{environment. The initial environment that is getting
modified during the execution of the stages.}

\item{stages}{list. The functions to execute on the \code{context}.}

\item{remember}{logical. Whether to keep a copy of the context and its
contents throughout each stage for debugging purposes--this makes it
easy to go back and investigate a stage.

The default is \code{FALSE}. When set to \code{TRUE}, the return value
of the \code{run} method will be a list of two environments: one of what
the context looked like before the \code{run} call, and another
of the aftermath.}

\item{mode}{character. Controls the default behavior of calling the
\code{run} method for this stageRunner. The two supported options are
"head" and "next". The former gives a stageRunner which always begins
from the first stage if the \code{from} parameter to the \code{run}
method is blank. Otherwise, it will begin from the previous unexecuted
stage. The default is "head". This argument has no effect if
\code{remember = FALSE}.}
}
\description{
stageRunner objects are used for executing a linear sequence of
actions on a context (an environment). For example, if we have an
environment \code{e} containing \code{x = 1, y = 2}, then using
\code{stages = list(function(e) e$x <- e$x + 1, function(e) e$y <- e$y - e$x)}
will cause \code{x = 2, y = 0} after running the stages.
}
